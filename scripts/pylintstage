#!/usr/bin/env python3

"""
    pre-commit git hook script that uses Pylint for automated code review.

    Checks staged python files if any python file's rating falls below the
    ``PASS_THRESHOLD``, this script will return nonzero and the commit
    will be rejected.

    This script must be located at ``$REPO/.git/hooks/pre-commit`` and be
    executable.

    Forked from Nick Fitzgerald.
    Copyright 2019 Massoud Boorboor - MIT Licensed.
"""

import os
import re
import sys

from subprocess import Popen, PIPE


PASS_THRESHOLD = 7
GIT_COMMAND = 'git diff --staged --name-only HEAD'
PYLINT_COMMMAND = 'pylint {}'
FAIL = '\033[31mFAIL\033[m'
PASS = '\033[32mPASS\033[m'
RESULT_PATTERN = re.compile(r"\d+\.\d+")
RESULT_HEADER = """
 ________________________________SUMMERY TABLE________________________________
|_______________________File_______________________|____Score____|___Result___|"""
RESULT_FOOTER = '|__________________________________________________|_____________|____________|'
RESULT_LINE = '|{file:<50}|{score:^13.2f}|{result:^20}|'


def main():
    """Checks your git commit with Pylint."""

    results = []
    violences = []
    for file in staged_py_files():
        pylint = Popen(PYLINT_COMMMAND.format(file).split(), stdout=PIPE)
        outs, errors = pylint.communicate(timeout=3)

        match = RESULT_PATTERN.search(outs.decode('utf-8'))
        score = float(match.group() if match else 0)
        result = FAIL if score < PASS_THRESHOLD else PASS
        results.append((file, score, result))
        violences += outs.decode('utf-8').split('\n')

    # Display a summary of the results (if any files were checked).
    if results:
        print_table(violences, results)

    # commit from continuing.
    if all((score > PASS_THRESHOLD) for _, score, _ in results):
        sys.exit(0)

    # Exit with none zero so git commit fail.
    sys.exit(1)


def staged_py_files():
    """Yield python git staged files.

    Run the git command that gets the staged filenames of every pyhton file
    that has been locally modified since the last commit.
    """

    process = Popen(GIT_COMMAND.split(), stdout=PIPE, stderr=PIPE)
    outs, errors = process.communicate(timeout=3)
    files = outs.decode('utf-8').split('\n')
    if errors:
        print(errors.decode('utf-8'))
        sys.exit(1)

    py_files = []
    for file in files:
        if file.endswith('.py') and os.path.exists(file):
            yield file


def print_table(violences, results):
    violences = [v for v in violences if len(v) and v[0] not in {'*', '-', 'Y'}]
    print('\n'.join(violences))
    print(RESULT_HEADER)
    for file, score, result in results:
        file = ('...' + file[-45:]) if len(file) > 48 else file
        print(RESULT_LINE.format(file=file, score=score, result=result))
    print(RESULT_FOOTER)


if __name__ == "__main__":
    main()
